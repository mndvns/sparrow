Offers = new Meteor.Collection("offers")

Meteor.methods({
  editOffer: function (type, options) {
    options = options || {}
    if (options.name.length < 5)
      throw new Meteor.Error(400, "Offer name is too short")

    if (type === 'insert') {
      return Offers.insert({
        owner: this.userId,
        name: options.name,
        price: options.price,
        votes: 0
      })
    }
    else if (type === 'update') {
      return Offers.update({
        owner: this.userId },
        {$set: {
          name: options.name,
          price: options.price
        }
      })
    }
  },
  upvote: function (offer, user) {
  }
})

if (Meteor.isClient) {

  Accounts.ui.config({
    passwordSignupFields: 'USERNAME_AND_OPTIONAL_EMAIL'
  })

  Meteor.subscribe("offers")
  Meteor.subscribe("allUserData")

  if(Meteor.userId() != null){
    Session.set('view', 'account')
  } else {
    Session.set('view', 'main')
  }

  Template.page.show_main = function (id) {
    if(Session.get('view') === 'main'){
      return true
    }
  }
  Template.page.show_account = function (id) {
    if(Session.get('view') === 'account' && Meteor.userId()){
      return true
    }
  }

  Template.page.events({
    'click nav>h2': function () {
      var target = event.currentTarget
      Session.set('view', target.id)
    }
  })

  // Template.main.events({
  //   'mousedown .offer': function () {
  //     Session.set('selected', event.currentTarget.id)
  //   }
  // })
  Template.offers.events({
    'click .upvote': function(event, template) {
      /* var selection = Session.get('selected') */
      var selection = $(event.currentTarget).parent().attr('id')
        , user = Meteor.user()
        , users = Meteor.users
        , parent = $(event.toElement).parent()

      // if (parent.hasClass("voted") || _.contains(user.votes, selection)) {
      //   return false
      // } else {
        /* parent.addClass("voted") */
        users.update({_id: user._id}, {$push: {votes:selection}})
        Offers.update(selection, {$inc: {votes: 1}})
        // j = event.toElement
        // $(j).parent().addClass("voted")
        // Meteor.flush()
      /* } */
    }
  });
  Template.offers.rendered = function () {
    console.log("RENDERED")
  }

  Template.main.getOffers = function() {
    return Offers.find({}, {sort: {votes: -1}})
  }
  Template.main.getOfferVoteHistory = function () {

  }
  Template.offer.events({
    'click .save' : function (event, template) {
      var name = template.find("#offerName").value
        , price = template.find("#offerPrice").value
        , type = Offers.findOne({owner: Meteor.userId()}) ? 'update' : 'insert'

      Meteor.call('editOffer', type, {
        name: name,
        price: price
      }, function (error) {
        if (error)
          Session.set('showStatus', error.reason)
        else
          Session.set('showStatus', "Success!")
      })
    }
  })
  Template.offer.message = function () {
    return Session.get('showStatus')
  }

  Template.offer.showStatus = function () {
    return Session.get('showStatus')
  }
  Template.offer.offer = function () {
    return Offers.findOne({owner: userId})
  }

  // PROFILE
  Template.profile.user = function () {
    return Meteor.user()
  }
}


  Users = new Meteor.Collection("userData")

if (Meteor.isServer) {
  Meteor.startup(function () {
    // code to run on server at startup
  });

  Accounts.onCreateUser(function(options, user) {
    user.type = 'basic'
    user.votes = []
    if (options.profile)
      user.profile = options.profile;
    return user;
  });

  Meteor.users.allow({
    update: function(userId, docs, fields, modifier) {
      return _.all(docs, function (doc) {
        return doc._id === userId
      })
    }
  })

  Meteor.publish("offers", function() {
    return Offers.find({})
  })

  Meteor.publish("allUserData", function () {
    return Meteor.users.find({}, {type: 1})
  })
}

